<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import javafx.scene.text.*?>
<?import java.lang.*?>
<?import java.net.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>

<AnchorPane id="AnchorPane" prefHeight="600.0" prefWidth="1000.0" styleClass="mainFxmlClass" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="soiiapplication.view.DidyouknowController">
    <stylesheets>
        <URL value="@didyouknow.css" />
    </stylesheets>
   <children>
      <HBox alignment="TOP_CENTER" layoutX="393.0" layoutY="31.0" maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
         <children>
            <Region maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" HBox.hgrow="ALWAYS" />
            <Label text="%didYouKnowMenuName" textFill="#575656">
               <HBox.margin>
                  <Insets top="30.0" />
               </HBox.margin>
               <font>
                  <Font size="22.0" />
               </font>
            </Label>
            <Region maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" HBox.hgrow="ALWAYS" />
         </children>
      </HBox>
      <TextArea editable="false" layoutX="45.0" layoutY="227.0" maxHeight="-Infinity" minHeight="-Infinity" text="Condições de Corrida&#10;Um resultado que depende de dois ou mais processos usando recursos compartilhados ilustra uma situação chamada de condição de corrida.&#10;Esse nome é dado porque o resultado depende de quem executa primeiro.&#10;Pool de impressão?!&#10;Região Crítica&#10;Para resolver o problema do não determinismo, criou-se o conceito de exclusão mútua.&#10;Quando há exclusão mútua, somente um processo tem acesso à memória compartilhada.&#10;O estudo na disciplina de sistemas operacionais foca no entendimento e escolha das primitivas adequadas escolhidas para garantir a exclusão mútua.&#10;Uma abstração pode ser criada: Região Crítica.&#10;Região Crítica: Seção de um programa que requer acesso à algum recurso compartilhado (Memória, por exemplo).&#10;Algumas condições são necessárias para que essa abstração permita um bom funcionamento dos processos.&#10;As quatro condições propostas são:&#10;1)Dois processos nunca podem estar simultaneamente em suas regiões críticas&#10;2)Nada pode ser afirmado sobre número e velocidade de CPUs&#10;3)Nenhum processo estando fora de sua região crítica pode bloquear outros processos.&#10;4)Nenhum processo deve esperar eternamente para entrar em sua região crítica.&#10;As primitivas que garantem esse tipo de funcionamento são chamadas de trava (lock, em inglês), ou seja, é permitido à um processo que tome o recurso só para si.&#10;Espera ociosa&#10;1)Desabilitar Interrupções&#10;2)Variáveis de Trava&#10;3)Chavemento Obrigatório&#10;4)Solução de Peterson&#10;5)TSL&#10;Sleep e Wakeup&#10;Semáforos&#10;Mutex&#10;Monitores" AnchorPane.bottomAnchor="120.0" AnchorPane.leftAnchor="50.0" AnchorPane.rightAnchor="50.0" AnchorPane.topAnchor="180.0" />
      <HBox alignment="CENTER" layoutX="400.0" layoutY="483.0" maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0">
         <children>
            <Region maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" HBox.hgrow="ALWAYS" />
            <Button alignment="CENTER" contentDisplay="CENTER" mnemonicParsing="false" onMouseClicked="#backButtonClicked" text="%didYouKnowBackButton" textAlignment="CENTER">
               <HBox.margin>
                  <Insets />
               </HBox.margin>
            </Button>
            <Region layoutX="110.0" layoutY="10.0" maxHeight="-Infinity" minHeight="-Infinity" prefHeight="100.0" HBox.hgrow="ALWAYS" />
         </children>
      </HBox>
   </children>
</AnchorPane>
