# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.

#Propriedades do Menu Principal
title = Applet de Regi\u00e3o Cr\u00edtica e Exclus\u00e3o M\u00fatua
menuName = Menu Principal
readableContent = Voc\u00ea sabia?
simulation = Simula\u00e7\u00e3o
credits = Cr\u00e9ditos
changeLanguage = Trocar L\u00edngua

#Frases Instrucionais do Menu Principal
selectAnOption = Selecione uma op\u00e7\u00e3o
readableInst = Alguns pontos importantes sobre o assunto
simulationInst = Anima\u00e7\u00e3o de alguns modelos predefinidos e aleat\u00f3rios
creditsInst = Conhe\u00e7a quem o est\u00e1 ajudando
changeLanguageInst = Voltar para o Menu de Linguagem

#Simula\u00e7\u00e3o
process1=Instru\u00e7\u00f5es do Processo 1
process2=Instru\u00e7\u00f5es do Processo 2
previous=Passo anterior
next=Pr\u00f3ximo passo
back=Voltar
currentprocess1=Processo 1 em execu\u00e7\u00e3o
2blocks1=Processo 2 bloqueia processo 1
noblocking=N\u00e3o houve bloqueio
currentprocess2=Processo 2 em execu\u00e7\u00e3o
1blocks2=Processo 1 bloqueia processo 2
nocritical=Nenhum processo em sua regi\u00e3o cr\u00edtica
critical1=Processo 1 est\u00e1 em sua regi\u00e3o cr\u00edtica
critical2=Process 2 est\u00e1 em sua regi\u00e3o cr\u00edtica
critical1and2=Os dois processos est\u00e3o em suas regi\u00f5es cr\u00edticas
executing=O Processo Em Execu\u00e7\u00e3o \u00c9...
criticalRegion=O Processo Na Regi\u00e3o Cr\u00edtica \u00c9...
blocking=Est\u00e1 havendo algum bloqueio?
Init=Iniciar
withsimulationMenuTitle=Simula\u00e7\u00e3o com Exclus\u00e3o M\u00fatua
withoutsimulationMenuTitle=Simula\u00e7\u00e3o sem Exclus\u00e3o M\u00fatua
randomsimulationMenuTitle=Simula\u00e7\u00e3o Aleat\u00f3ria com Exclus\u00e3o M\u00fatua
noprocess=Processos j\u00e1 terminaram
withstep0=Imagine dois processos executando concorrentemente incrementando uma \u00fanica vari\u00e1vel em uma\nlocaliza\u00e7\u00e3o compartilhada em mem\u00f3ria.\Ambos processos querem ler da mem\u00f3ria e adicionar 1 ao valor.\nSuponha que o valor em mem\u00f3ria seja 95. Esperamos que o primeiro processo que ler a mem\u00f3ria encontre o valor 95\nadicione 1 e armazene na mem\u00f3ria o valor 96.\nO valor 96 seria lido ent\u00e3o pelo outro processo e 97 seria armazenado. Mas como a execu\u00e7\u00e3o dos dois processos pode\nser coordenada para que os valores corretos sejam lidos e escritos?
withstep1=Essa coordena\u00e7\u00e3o \u00e9 feita utilizando-se exclus\u00e3o m\u00fatua, isto \u00e9, um mecanismo que permite que apenas um\nprocesso por vez leia ou escreva na mem\u00f3ria compartilhada. O primeiro processo \u00e9 selecionado pelo escalonador e\ncome\u00e7a a executar, criando uma vari\u00e1vel local.
withstep2=Devido \u00e0 exclus\u00e3o m\u00fatua, apenas um processo por vez pode estar em sua regi\u00e3o cr\u00edtica. Como o processo 2\nainda n\u00e3o est\u00e1 em sua regi\u00e3o cr\u00edtica, o processo 1 pode avan\u00e7ar e acessar sua regi\u00e3o cr\u00edtica, "travando-a".
withstep3=Entretanto, o escalonador decide que \u00e9 hora de deixar o processo 2 executar um pouco.\nEnt\u00e3o, o processo 2 come\u00e7a a executar e tamb\u00e9m cria uma vari\u00e1vel local.
withstep4=Ent\u00e3o,  o processo 2 tenta avan\u00e7ar para a pr\u00f3xima instru\u00e7\u00e3o e entrar em sua\nregi\u00e3o cr\u00edtica. Mas o processo 1 j\u00e1 est\u00e1 na regi\u00e3o cr\u00edtica dele, tendo travado-a anteriormente!\nEnt\u00e3o o processo 2 \u00e9 bloqueado.
withstep5=Como o processo 2 foi bloqueado, \u00e9 a vez de o processo 1 executar novamente.\nEle j\u00e1 est\u00e1 em sua regi\u00e3o cr\u00edtia e l\u00ea o conte\u00fado do endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada.\nO conte\u00fado lido \u00e9 95 e \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel local.
withstep6=O escalonador decide que \u00e9 a vez de o processo 2 executar novamente.\nEle tenta entrar em sua regi\u00e3o cr\u00edtica novamente, mas devido \u00e0 exclus\u00e3o m\u00fatua, como o processo 1 j\u00e1 est\u00e1 em sua regi\u00e3o cr\u00edtica,\no processo 2 \u00e9 bloqueado novamente.
withstep7=O processo 1 ent\u00e3o volta a executar. O valor 1 \u00e9 adicionado ao conte\u00fado da vari\u00e1vel local, que agora tem o valor 96.
withstep8=O processo 2 \u00e9 selecionado pelo escalonador novamente e come\u00e7a sua execu\u00e7\u00e3o.\nPor\u00e9m, novamente, ele n\u00e3o pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica, j\u00e1 que o processo 1 ainda est\u00e1 na dele. O processo 2 \u00e9 bloqueado.
withstep9=O processo 1 executa de novo e escreve o valor 96 no endere\u00e7o de mem\u00f3ria 0xF4D9012C.
withstep10=O processo 2 \u00e9 selecionado pelo escalonador novamente e come\u00e7a sua execu\u00e7\u00e3o.\nPor\u00e9m, novamente, ele n\u00e3o pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica, j\u00e1 que o processo 1 ainda est\u00e1 na dele. O processo 2 \u00e9 bloqueado.
withstep11=Ent\u00e3o, o escalonador escolhe o processo 1 para executar. O processo 1 finalmente\nsai de sua regi\u00e3o cr\u00edtica, "destravando-a" e terminando de executar.
withstep12=Como o processo 1 j\u00e1 terminou de executar e j\u00e1 saiu de sua regi\u00e3o cr\u00edtica,\no processo 2 pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica! Ele faz isso, "travando-a".
withstep13=O processo 2 l\u00ea o valor armazenado no endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada, 96.\nO valor \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel local.
withstep14=O processo 2 adiciona 1 ao valor da vari\u00e1vel local, que torna-se 97.
withstep15=O processo 2 escreve o valor 97 no endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada.
withstep16=O processo 2 sai de sua regi\u00e3o cr\u00edtica, "destravando-a".
withstep17=O processo 2 ent\u00e3o termina de executar.\nAp\u00f3s a execu\u00e7\u00e3o dos dois processos, temos o valor 97 armazenado no endere\u00e7o\n0xF4D9012C da mem\u00f3ria compartilhada, como esperado.
withoutstep0=Imagine dois processos executando concorrentemente incrementando uma \u00fanica vari\u00e1vel em\numa localiza\u00e7\u00e3o compartilhada em mem\u00f3ria. Ambos processos querem ler da mem\u00f3ria e adicionar 1 ao valor.\nSuponha que o valor em mem\u00f3ria seja 95. Se fosse executado um \u00fanico programa sequencial, onde os processos fossem fun\u00e7\u00f5es,\no valor 95 seria lido pela primeira fun\u00e7\u00e3o, incrementado e guardado em mem\u00f3ria.\nO valor 96 seria lido pela outra fun\u00e7\u00e3o e 97 seria armazenado.
withoutstep1=Iremos agora ilustrar como as coisas podem dar errado se n\u00e3o for utilizada exclus\u00e3o\nm\u00fatua quando processos concorrentes estiverem executando e accessando um recurso de mem\u00f3ria compartihado.\nO primeiro processo \u00e9 selecionado pelo escalonador e come\u00e7a a executar. \u00c9 criada uma vari\u00e1vel local.
withoutstep2=Ent\u00e3o, o primeiro processo l\u00ea o valor 95 armazenado no endere\u00e7o de mem\u00f3ria 0xF4D9012C o mant\u00e9m guardado em uma vari\u00e1vel local.
withoutstep3=Por\u00e9m, antes que o processo 1 possa operar no valor,\no escalonador decide que \u00e9 a vez do processo 2 de rodar.
withoutstep4=O segundo processo l\u00ea o valor inalterado no endere\u00e7o 0xF4D9012C, o mesmo valor que o primeiro processo leu (95).
withoutstep5=O escalonador, gostando mais do processo 1 que do 2, permite o 2 continuar sua execu\u00e7\u00e3o.\nO segundo processo adiciona um ao valor, resultando em 96.
withoutstep6=Finalmente, o processo 2 guarda o valor 96 no endere\u00e7o FD49012C e termina sua execu\u00e7\u00e3o.
withoutstep7=O escalonador lembra que o processo 1 existe e d\u00e1 tempo de processador a ele, fazendo o processo 1 resumir sua opera\u00e7\u00e3o.\nEnt\u00e3o ele adiciona um ao valor que ele leu antes de o processo 2 ter come\u00e7ado (95).
withoutstep8=Por \u00faltimo, o processo 1 guarda no endere\u00e7o FD49012C o valor 96, ao inv\u00e9s do 97 desejado...
withoutstep9=...e termina. Agora, em vez de termos o valor esperado de 97 armazenado na posi\u00e7\u00e3o\nde mem\u00f3ria 0xF4D9012C, temos o valor 96.
randomstep=Essa simula\u00e7nao envolve dois processos que comparilham uma mem\u00f3ria comum e executam concorrentemente.\nAmbos t\u00eam la\u00e7os while intermin\u00e1veis. O escalonador seleciona um processo para ser executado aleatoriamente a cada ciclo.\nEssa simula\u00e7\u00e3o utiliza os pr\u00edncipios de exclus\u00e3o m\u00fatua.

#Voc\u00ea Sabia?
didYouKnowMenuName = Voc\u00ea sabia?
didYouKnowInstructional = Aqui voc\u00ea encontra conte\u00fado sobre os assuntos a serem ensinados\nRecomenda-se a leitura do contepudo antes de assistir \u00e0\u00a0 simula\u00e7\u00e3o
didYouKnowBackButton = Voltar

#Cr\u00e9ditos
creditsMenuName = Cr\u00e9ditos
creditsBackButton = Voltar

#ChooseMenu
mutualExclusion = Exclus\u00e3o M\u00fatua
noMutualExclusion = Sem Exclus\u00e3o M\u00fatua
random = Aleat\u00f3rio
backButtonChooseSimulationMenu = Voltar ao menu principal
chooseMenuTitle = Escolha o modo de simulacao
onMutualExclusion=Assista uma simula\u00e7\u00e3o passo-a-passo de um sistema mononucleado que implementa exclus\u00e3o m\u00fatua
onNoMutualExclusion=Assista uma simula\u00e7\u00e3o passo-a-passo de um sistema mononucleado que n\u00e3o implementa exclus\u00e3o m\u00fatua
onRandom=Esta simula\u00e7\u00e3o tenta emular um escalonador que decide qual processo rodar de uma maneira aleat\u00f3ria