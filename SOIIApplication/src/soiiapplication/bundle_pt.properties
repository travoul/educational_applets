#/* SSC0640 - Operating Systems 1
# * Institute of Mathematical and Computer Sciences
# * School of Engineering of Sao Carlos
# * University of Sao Paulo
# * Project 2 - Mutual Exclusion and Critical Region Applet
# * 17/06/2015
# ***************************************************************
# * Authors
# * Guilherme Nishina Fortes 			#- No. USP 7245552
# * Henrique de Almeida Machado da Silveira 	#- No. USP 7961089
# * Marcello de Paula Ferreira Costa 		#- No. USP 7960690
# * Sergio Yudi Takeda 				#- No. USP 7572996
# ***************************************************************
# * GROUP 13
# */

#Propriedades do Menu Principal
title = Applet de Regi\u00e3o Cr\u00edtica e Exclus\u00e3o M\u00fatua
menuName = Menu Principal
readableContent = Resumo dos Conceitos
simulation = Simula\u00e7\u00f5es
credits = Cr\u00e9ditos
changeLanguage = Trocar Idioma

#Frases Instrucionais do Menu Principal
selectAnOption = Selecione uma op\u00e7\u00e3o
readableInst = Alguns pontos importantes sobre o assunto
simulationInst = Anima\u00e7\u00e3o de alguns modelos predefinidos e aleat\u00f3rios
creditsInst = Conhe\u00e7a quem o est\u00e1 ajudando
changeLanguageInst = Voltar para o Menu de Linguagem

#Simula\u00e7\u00e3o
process1=Instru\u00e7\u00f5es do Processo 1
process2=Instru\u00e7\u00f5es do Processo 2
previous=Passo Anterior
next=Pr\u00f3ximo Passo
back=Voltar
currentprocess1=Processo 1 em execu\u00e7\u00e3o
2blocks1=Processo 2 bloqueia processo 1
noblocking=N\u00e3o houve bloqueio
currentprocess2=Processo 2 em execu\u00e7\u00e3o
1blocks2=Processo 1 bloqueia processo 2
nocritical=Nenhum processo em sua regi\u00e3o cr\u00edtica
critical1=Processo 1 est\u00e1 em sua regi\u00e3o cr\u00edtica
critical2=Process 2 est\u00e1 em sua regi\u00e3o cr\u00edtica
critical1and2=Os dois processos est\u00e3o em suas regi\u00f5es cr\u00edticas
executing=O Processo Em Execu\u00e7\u00e3o \u00c9...
criticalRegion=O Processo Na Regi\u00e3o Cr\u00edtica \u00c9...
blocking=Est\u00e1 havendo algum bloqueio?
Init=Iniciar
withsimulationMenuTitle=Simula\u00e7\u00e3o com Exclus\u00e3o M\u00fatua
withoutsimulationMenuTitle=Simula\u00e7\u00e3o sem Exclus\u00e3o M\u00fatua
randomsimulationMenuTitle=Simula\u00e7\u00e3o Aleat\u00f3ria com Exclus\u00e3o M\u00fatua
noprocess=Processos j\u00e1 terminaram
withstep0=Imagine dois processos executando concorrentemente incrementando uma \u00fanica vari\u00e1vel em uma localiza\u00e7\u00e3o compartilhada \nna mem\u00f3ria. Ambos processos querem ler da mem\u00f3ria e adicionar 1 ao valor. Suponha que o valor em mem\u00f3ria seja 95.\nEsperamos que o primeiro processo que ler a mem\u00f3ria encontre o valor 95 adicione 1 e armazene na mem\u00f3ria o valor 96.\nO valor 96 seria lido ent\u00e3o pelo outro processo e 97 seria armazenado. Mas como a execu\u00e7\u00e3o dos dois processos pode\nser coordenada para que os valores corretos sejam lidos e escritos?
withstep1=Essa coordena\u00e7\u00e3o \u00e9 feita utilizando-se exclus\u00e3o m\u00fatua, isto \u00e9, um mecanismo que permite que apenas um processo\npor vez leia ou escreva na mem\u00f3ria compartilhada. O primeiro processo \u00e9 selecionado pelo escalonador e come\u00e7a a\n executar, criando uma vari\u00e1vel local.
withstep2=Devido \u00e0 exclus\u00e3o m\u00fatua, apenas um processo por vez pode estar em sua regi\u00e3o cr\u00edtica. Como o processo 2\nainda n\u00e3o est\u00e1 em sua regi\u00e3o cr\u00edtica, o processo 1 pode avan\u00e7ar e acessar sua regi\u00e3o cr\u00edtica, "travando-a".
withstep3=Entretanto, o escalonador decide que \u00e9 hora de deixar o processo 2 executar um pouco.\nEnt\u00e3o, o processo 2 come\u00e7a a executar e tamb\u00e9m cria uma vari\u00e1vel local.
withstep4=Ent\u00e3o, o processo 2 tenta avan\u00e7ar para a pr\u00f3xima instru\u00e7\u00e3o e entrar em sua regi\u00e3o cr\u00edtica. Mas o processo\n 1 j\u00e1 est\u00e1 na regi\u00e3o cr\u00edtica dele, tendo travado-a anteriormente!\nEnt\u00e3o o processo 2 \u00e9 bloqueado.
withstep5=Como o processo 2 foi bloqueado, \u00e9 a vez de o processo 1 executar novamente.\nEle j\u00e1 est\u00e1 em sua regi\u00e3o cr\u00edtia e l\u00ea o conte\u00fado do endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada.\nO conte\u00fado lido \u00e9 95 e \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel local.
withstep6=O escalonador decide que \u00e9 a vez de o processo 2 executar novamente.\nEle tenta entrar em sua regi\u00e3o cr\u00edtica novamente, mas devido \u00e0 exclus\u00e3o m\u00fatua, como o processo 1 j\u00e1 est\u00e1 em sua regi\u00e3o cr\u00edtica,\no processo 2 \u00e9 bloqueado novamente.
withstep7=O processo 1 ent\u00e3o volta a executar. O valor 1 \u00e9 adicionado ao conte\u00fado da vari\u00e1vel local, que agora tem o valor 96.
withstep8=O processo 2 \u00e9 selecionado pelo escalonador novamente e come\u00e7a sua execu\u00e7\u00e3o.\nPor\u00e9m, novamente, ele n\u00e3o pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica, j\u00e1 que o processo 1 ainda est\u00e1 na dele. O processo 2 \u00e9 bloqueado.
withstep9=O processo 1 executa de novo e escreve o valor 96 no endere\u00e7o de mem\u00f3ria 0xF4D9012C.
withstep10=O processo 2 \u00e9 selecionado pelo escalonador novamente e come\u00e7a sua execu\u00e7\u00e3o.\nPor\u00e9m, novamente, ele n\u00e3o pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica, j\u00e1 que o processo 1 ainda est\u00e1 na dele. O processo 2 \u00e9 bloqueado.
withstep11=Ent\u00e3o, o escalonador escolhe o processo 1 para executar. O processo 1 finalmente\nsai de sua regi\u00e3o cr\u00edtica, "destravando-a" e terminando de executar.
withstep12=Como o processo 1 j\u00e1 terminou de executar e j\u00e1 saiu de sua regi\u00e3o cr\u00edtica,\no processo 2 pode avan\u00e7ar para sua regi\u00e3o cr\u00edtica! Ele faz isso, "travando-a".
withstep13=O processo 2 l\u00ea o valor armazenado no endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada, 96.\nO valor \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel local.
withstep14=O processo 2 adiciona 1 ao valor da vari\u00e1vel local, que torna-se 97.
withstep15=O processo 2 escreve o valor 97 no endere\u00e7o 0xF4D9012C da mem\u00f3ria compartilhada.
withstep16=O processo 2 sai de sua regi\u00e3o cr\u00edtica, "destravando-a".
withstep17=O processo 2 ent\u00e3o termina de executar.\nAp\u00f3s a execu\u00e7\u00e3o dos dois processos, temos o valor 97 armazenado no endere\u00e7o\n0xF4D9012C da mem\u00f3ria compartilhada, como esperado.
withoutstep0=Imagine dois processos executando concorrentemente incrementando uma \u00fanica vari\u00e1vel em uma localiza\u00e7\u00e3o compartilhada\nna mem\u00f3ria. Ambos processos querem ler da mem\u00f3ria e adicionar 1 ao valor. Suponha que o valor em mem\u00f3ria seja 95.\nSe fosse executado um \u00fanico programa sequencial, onde os processos fossem fun\u00e7\u00f5es, o valor 95 seria lido pela primeira fun\u00e7\u00e3o,\nincrementado e guardado em mem\u00f3ria. O valor 96 seria lido pela outra fun\u00e7\u00e3o e 97 seria armazenado.
withoutstep1=Iremos agora ilustrar como as coisas podem dar errado se n\u00e3o for utilizada exclus\u00e3o m\u00fatua quando processos concorrentes\nestiverem executando e accessando um recurso de mem\u00f3ria compartihado. O primeiro processo \u00e9 selecionado pelo escalonador\ne come\u00e7a a executar. \u00c9 criada uma vari\u00e1vel local.
withoutstep2=Ent\u00e3o, o primeiro processo l\u00ea o valor 95 armazenado no endere\u00e7o de mem\u00f3ria 0xF4D9012C e o mant\u00e9m\nguardado em uma vari\u00e1vel local.
withoutstep3=Por\u00e9m, antes que o processo 1 possa operar no valor, o escalonador decide que \u00e9 a vez do processo 2 de rodar.
withoutstep4=O segundo processo l\u00ea o valor inalterado no endere\u00e7o 0xF4D9012C, o mesmo valor que o primeiro processo leu (95).
withoutstep5=O escalonador, gostando mais do processo 1 que do 2, permite o 2 continuar sua execu\u00e7\u00e3o.\nO segundo processo adiciona um ao valor, resultando em 96.\nNote que, \u00e0 partir de agora, a ordem de execu\u00e7\u00e3o pouco importa.
withoutstep6=Finalmente, o processo 2 guarda o valor 96 no endere\u00e7o FD49012C e termina sua execu\u00e7\u00e3o.
withoutstep7=O escalonador lembra que o processo 1 existe e d\u00e1 tempo de processador a ele, fazendo o processo 1 resumir sua opera\u00e7\u00e3o.\nEnt\u00e3o ele adiciona um ao valor que ele leu antes de o processo 2 ter come\u00e7ado (95).
withoutstep8=Por \u00faltimo, o processo 1 guarda no endere\u00e7o FD49012C o valor 96.
withoutstep9=...e termina. Agora, em vez de termos o valor esperado de 97 armazenado na posi\u00e7\u00e3o\nde mem\u00f3ria 0xF4D9012C, temos o valor 96.
randomstep=Esta simula\u00e7\u00e3o envolve dois processos que compartilham uma mem\u00f3ria comum e executam concorrentemente.\nAmbos t\u00eam la\u00e7os while intermin\u00e1veis. O escalonador seleciona um processo para ser executado aleatoriamente a cada ciclo.\nEssa simula\u00e7\u00e3o utiliza os pr\u00edncipios de exclus\u00e3o m\u00fatua.
colorLabel1String=Instru\u00e7\u00e3o em execu\u00e7\u00e3o
colorLabel2String=Ultima instru\u00e7\u00e3o executada
colorLabel3String=Falhou em executar a pr\u00f3xima instru\u00e7\u00e3o
legenda=Legenda
#Voc\u00ea Sabia?
didYouKnowMenuName = Voc\u00ea sabia?\u00b4
didYouKnowInstructional = Aqui voc\u00ea encontra conte\u00fado sobre os assuntos a serem ensinados\nRecomenda-se a leitura do contepudo antes de assistir \u00e0\u00a0 simula\u00e7\u00e3o
didYouKnowBackButton = Voltar
didYouKnowContent=*** Resumo de conceitos ***\n\n1) Condi\u00e7\u00f5es de Corrida\n\nQuando dois ou mais processos distintos est\u00e3o utilizando algum recurso compartilhado e a ordem em que essa utiliza\u00e7\u00e3o \u00e9 feita\ninterefere no resultado final, temos uma condi\u00e7\u00e3o de corrida. Esse nome \u00e9 dado porque o resultado depende de quem executa primeiro.\nExemplo: Assim como ilustrado na simula\u00e7\u00e3o sem exclus\u00e3o m\u00fatua deste recurso educacional aberto, h\u00e1 uma condi\u00e7\u00e3o de corrida quando\ndois processos acessam uma regi\u00e3o de mem\u00f3ria compartilhada e n\u00e3o h\u00e1 um mecanismo que determina quando e como esses processos\npodem realizar opera\u00e7\u00f5es na mem\u00f3ria. Se um processo ler e escrever na mem\u00f3ria ao mesmo tempo que o outro, o resultado final\npode ser diferente do esperado!\n\n2) Exclus\u00e3o M\u00fatua\n\nPara resolver o problema do n\u00e3o-determinismo decorrente das condi\u00e7\u00f5es de corrida, criou-se o conceito de exclus\u00e3o m\u00fatua.\nQuando h\u00e1 um mecanismo de exclus\u00e3o m\u00fatua, somente um processo tem acesso \u00e0 mem\u00f3ria compartilhada (ou outro recurso compartilhado)\npor vez. O estudo na disciplina de Sistemas Operacionais foca no entendimento e escolha das primitivas adequadas para garantir\numa exclus\u00e3o m\u00fatua. Uma abstra\u00e7\u00e3o pode ser criada para interpretar o problema de evitar condi\u00e7\u00f5es de corrida: o conceito\nde Regi\u00e3o Cr\u00edtica.\n\n3) Regi\u00e3o Cr\u00edtica\n\nRegi\u00e3o Cr\u00edtica \u00e9 a se\u00e7\u00e3o de um programa em que h\u00e1 acesso a algum recurso compartilhado (mem\u00f3ria, por exemplo). Para evitar\ncondi\u00e7\u00f5es de corrida, \u00e9 preciso garantir que processos distintos n\u00e3o estejam em suas regi\u00f5es cr\u00edticas ao mesmo tempo. Entretanto,\npara garantir um funcionamento correto e eficiente de processo concorrentes, algumas condi\u00e7\u00f5es s\u00e3o necess\u00e1rias ao implementar um\nmecanismo de exclus\u00e3o m\u00fatua.\n\n4) Condi\u00e7\u00f5es necess\u00e1rias para uma boa solu\u00e7\u00e3o de exclus\u00e3o m\u00fatua\n\nAs quatro condi\u00e7\u00f5es s\u00e3o:\n\t1) Dois processos nunca podem estar simultaneamente em suas regi\u00f5es cr\u00edticas\n\t2) Nada pode ser afirmado sobre n\u00famero e velocidade de CPUs\n\t3) Nenhum processo estando fora de sua regi\u00e3o cr\u00edtica pode bloquear outros processos.\n\t4) Nenhum processo deve esperar eternamente para entrar em sua regi\u00e3o cr\u00edtica.\n\n5) Implementa\u00e7\u00e3o de mecanismos para exclus\u00e3o m\u00fatua\n\nAs primitivas que garantem o funcionamento de uma solu\u00e7\u00e3o de exclus\u00e3o m\u00fatua s\u00e3o chamadas de\ntrava (lock, em ingl\u00eas), j\u00e1 que remetem ao fato de um processo tomar o recurso que utilizar\u00e1 s\u00f3 para si.\n\u00c9 importante destacar que, para sistemas mononucleados,o ato de adquirir uma trava deve ser at\u00f4mico, ou seja, feito sem interrup\u00e7\u00f5es.\nAlguns exemplos de primitivas (nem todas respeitando as 4 condi\u00e7\u00f5es acima) s\u00e3o:\n\ta) Espera ociosa\n\tb) Desabilitar Interrup\u00e7\u00f5es\n\tc) Vari\u00e1veis de trava\n\td) Chavemento Obrigat\u00f3rio\n\te) Solu\u00e7\u00e3o de Peterson\n\tf) Instru\u00e7\u00e3o TSL\n\tg) Sleep e Wakeup\n\th) Sem\u00e1foros\n\ti) Mutex\n\tj) Monitores\n\nBIBLIOGRAFIA:\nTanenbaum, Andrew S. (2008). Modern operating systems. Upper Saddle River, NJ: Pearson Prentice Hall. ISBN 0-13-600663-9.

#Cr\u00e9ditos
creditsMenuName = Cr\u00e9ditos
creditsBackButton = Voltar
creditsContent=Autores:                                                         Github Profile\nGuilherme Nishina Fortes                              @GuilhermeNishina\nHenrique de Almeira Machado da Silveira    @henrisilver\nMarcello de Paula Ferreira Costa                  @travoul\nS\u00e9rgio Yudi Takeda                                       @SergioTakeda\n\nRecurso Educacional Aberto feito para a disciplina de Sistemas Operacionais I SSC-0640\nInstituto de Ci\u00eancias Matem\u00e1ticas e de Computa\u00e7\u00e3o\nEscola de Engenharia de S\u00e3o Carlos\nUniversidade de S\u00e3o Paulo - Campus de S\u00e3o Carlos\nProfessor respons\u00e1vel: Paulo S\u00e9rgio Lopes de Souza\nJunho de 2015\n\nOrigem das imagens de bandeira: http://www.nordicfactory.com\nOrigem da imagem de fundo: http://subtlepatterns.com/grey-washed-wall/\n\nBIBLIOGRAFIA:\nTanenbaum, Andrew S. (2008). Modern operating systems.\nUpper Saddle River, NJ: Pearson Prentice Hall. ISBN 0-13-600663-9.


#ChooseMenu
mutualExclusion = Exclus\u00e3o M\u00fatua
noMutualExclusion = Sem Exclus\u00e3o M\u00fatua
random = Aleat\u00f3rio
backButtonChooseSimulationMenu = Voltar ao menu principal
chooseMenuTitle = Escolha o modo de simulacao
onMutualExclusion=Assista uma simula\u00e7\u00e3o passo-a-passo de um sistema mononucleado que implementa exclus\u00e3o m\u00fatua
onNoMutualExclusion=Assista uma simula\u00e7\u00e3o passo-a-passo de um sistema mononucleado que n\u00e3o implementa exclus\u00e3o m\u00fatua
onRandom=Esta simula\u00e7\u00e3o tenta emular um escalonador que decide qual processo rodar de uma maneira aleat\u00f3ria