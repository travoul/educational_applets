# To change this license header, choose License Headers in Project Properties.
# To change this template file, choose Tools | Templates
# and open the template in the editor.

#Main Menu Fixed Phrases
title = Critical Region and Mutual Exclusion Applet
menuName = Main Menu
readableContent = Important Shit
simulation = Simulation
credits = Credits
changeLanguage = Change Language

#Main Menu Insctructional Phrases
selectAnOption = Select an option
readableInst = Aquire some important knowledge
simulationInst = Animated point of view of the subjects
creditsInst = See who is helping you
changeLanguageInst = Go back to Language Menu

#Simulation Window
process1=Process 1 Instructions
process2=Process 2 Instructions
previous=Previous step
next=Next step
back=Go to previous menu
currentprocess1=Process 1 is executing
2blocks1=Process 2 blocks process 1
noblocking=No blocking occurred
currentprocess2=Process 2 is executing
1blocks2=Process 1 blocks process 2
nocritical=No process is in its critical region
critical1=Process 1 is in its critical region
critical2=Process 2 is in its critical region
critical1and2=Both processes are in their critical regions
executing=Current Process Executing Is...
criticalRegion=Current Process In Critical Region Is...
blocking=Is A Process Blocking the Other?
Init=Start
simulationMenuTitle=Simulation
noprocess=Processes have ended execution
step1=Imagine two processes are running incrementing a single variable in a shared memory location.\nBoth processes want to read from memory and add one to the value.\nSay the value stored in memory is 95. If this was a single sequential program, and the processes functions,\nthe value 95 would be read by the first function, incremented and then stored.\nThe value 96 would then be read by the other function and 97 stored.
step2=We'll now illustrate how the implementation of processes demand mutual exclusion and synchronization.\nThe first process reads the value 95 stored in memory at location F4D9012C and keeps it in a local variable.
step3=But before it can operate on the value,\nthe scheduler decides it is process' 2 turn, and it is allowed to run.
step4=The second process reads the unaltered value at address F4D9012C, the same value that the first process read (95).
step5=The scheduler, liking process 2 better than 1, allows it to continue execution.\nThe second process adds one to the value, outputting 96.
step6=Finally, it stores the value 96 at memory address F4D9012C and finishes its run.
step7=The scheduler remembers process 1 exists and gives it processor time, resuming its operation.\nSo, it adds one to the value it read even before process 2 started execution (95).
step8=Lastly, process 1 stores at memory address F4D9012C the value 96, instead of the desired 97...
step9=...and terminates.


#Did You Know Window
didYouKnowMenuName = Did you know?
didYouKnowInstructional = Here you will find content about the subjects meant to be taught.\nIt is highly recommended to read before whatchin the simulation
didYouKnowBackButton = Back

#Credits
creditsMenuName = Credits
creditsBackButton = Back

#ChooseMenu
mutualExclusion = Mutal Exclusion
noMutualExclusion = No Mutual Exclusion
random = Random
backButtonChooseSimulationMenu = Back to main menu
chooseMenuTitle = Choose Simulation Mode